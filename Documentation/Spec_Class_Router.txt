##########
##Router##
##########

Last Revised: 22 November 2015 by Ahmed Alshaia


class Router extends Node

	def initalize_routing_table(self,hosts_ids):
		Initialize routing table by creating keys for all hosts in the test case.
		The value of the table is a tuple (distance between current router and destination host, next hop(link)).
		Initially, set the distance to be inf, the next hop to link[0]
		If the host destination is connected to the router, set the distance to 1 and next hop to the corresponiding link
		Send first iteration of router packet

	def update_routing_table(self, router_packet):
		Implement Bellman-Ford algorithm. 
		Compare router table from acknowledgement of router packet received from neighbor routers and the current router. 
		Update router table if there is a shorter path.
		Static routing: metric based on hops (1 hop for each link)
		Dynamic routing: metric based on link cost

	def receive(self, packet):
		Based on the type of the received packet:
		If the received packet type is DATA or ACK_DATA, call send(packet)
		If the received packet type is ROUTER, create an ACK_ROUTER packet and send back routing info
		If the received packet type is ACK_ROUTER, call update_routing_table()

	def send(self, packet):
		Based on the type of the received packet:
		If the received packet type is DATA or ACK_DATA, set next_dest (link)
		If the received packet type is ROUTER, send back the routing info
		If the received packet type is ACK_ROUTER, create a cost for traveling through the link

	def routing_table_periodic_update():
		Updates outdated routing table periodically

end class;
