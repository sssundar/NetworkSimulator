###########
## Links ##
###########

The link cannot act like a stoplight; we'll get large fluctuations in queueing 
delay and our TCP algorithms will not stabilize.

So, instead, we need to add a time stamp to a packet as it's added to the link
buffer. 

When we're sending a packet, we check the max timestamp of both buffers.
If we can send more than one packet before the next timestamp in the other buffer
we do it. Otherwise we don't. This is telepathy.


class Link extends Reporter
	private Link_Queue left_queue, right_queue;
	private Switch_Link_Direction dir_time_out; 
	private Transmission_Callback tx_callback = null;
	private Node left_node, right_node;	
	private integer buffer_length; -- bits
	private double capacity; -- bits/second
	private double propagation_delay;  -- seconds	
	private Event_Simulator sim; 

	private string current_direction = "right"; -- "right" or "left"
	private double traffic_period; -- seconds after which link flips direction

	public method void Link(string LinkID) {
		this.ID = LinkID;
	}

	public method void set_simulator(Event_Priority_Queue sim) {
		this.sim = sim;
	}

	public method void set_nodes (Node left_node, Node right_node) {
		this.left_node = left_node;
		this.right_node = right_node;
	}

	public method void set_buffer_bit_length (integer buffer_length) {
		this.buffer_length = buffer_length;
		this.left_queue = new Link_Queue(buffer_length, "left");
		this.right_queue = new Link_Queue(buffer_length, "right");
	}

	public method void set_channel_capacity (double capacity) {
		this.capacity = capacity;
	}							
	
	public method void set_prop_delay (double propagation_delay) {
		this.propagation_delay = propagation_delay;
	}

	public method void set_traffic_switch_period (double traffic_period) {
		this.traffic_period = traffic_period;
		setup_direction_timeout();
	}			

	private method void setup_direction_timeout () {
		this.dir_time_out = new Switch_Link_Direction(	
										this, 
										this.sim.get_current_time() + 
											this.traffic_period
										);								
		this.sim.request_event(this.dir_time_out);			
	}

	public method void switch_direction () {
		setup_direction_timeout();
		if (this.current_direction == "left") {
			this.current_direction = "right";
			transfer_next_packet(this.right_queue);
			log("link switching to right at " . this.sim.get_current_time());
		} else {
			this.current_direction = "left";
			transfer_next_packet(this.left_queue)
			log("link switching to left at " . this.sim.get_current_time());
		}		
	}

	private method void transfer_next_packet (Link_Queue q) {
		double current_time = this.sim.get_current_time();
		double time_left = this.time_out.get_completion_time() - current_time;		

		if q.isMyDirection(this.current_direction) {			
			if (not tx_callback == null AND not tx_callback.is_active()) {				
				if q.can_dequeue() {					
					Packet potential_tx = q.head();
					double channel_loading_delay = 
						((double) potential_tx.bit_length()) / this.capacity;

					if (channel_loading_delay + propagation_delay < time_left) {

						this.tx_callback = 
							new Transmission_Callback(
								this,
								q,
								current_time+channel_loading_delay);
						this.sim.request_event(this.tx_callback);			
						
						this.sim.request_event(
							Handle_Packet_Arrival(
								q.dequeue(), 
								current_time + channel_loading_delay + 
									propagation_delay
									)
								);
					}
				}	
			}
		}
	}


	-- how a Node attempts to send a packet through this link
	public method void send (Packet p, Node source) {
		if ( source.get_id() = left_node.get_id() ) {
			-- Transfer Requested Left -> Right
			if left_queue.can_enqueue(p) {
				left_queue.enqueue(p);
				transfer_next_packet(left_queue);
			} else {
				log("packet dropped at " . this.sim.get_current_time());
			}			
		} else {
			-- Transfer Requested Right -> Left
			if right_queue.can_enqueue(p) {
				right_queue.enqueue(p);
				transfer_next_packet(right_queue);
			} else {
				log("packet dropped at " . this.sim.get_current_time());
			}			
		}		
	}

end class

<include constants -> contains integer MINIMUM_PACKET_BIT_LENGTH = 128; >

class Link_Queue
	private integer head;
	private integer tail;
	private integer max_bit_capacity;	
	private integer current_bit_length;
	private integer max_packets_queued;
	private integer packets_queued;
	private Packet[] buffer;	
	private String direction;

	-- initialization	
	public method void Link_Queue(integer bit_capacity, String direction) {
		this.max_bit_capacity = capacity;		
		this.current_bit_length = 0;
		this.max_packets_queued = math.ceiling(
			((double) max_bit_capacity) / MINIMUM_PACKET_BIT_LENGTH );
		this.current_packet_index = 0;
		
		this.direction = direction;

		this.buffer = new Packet[capacity];		
		this.head = 0;
		this.tail = 0;		
	}

	public method boolean isMyDirection(String d) {
		return d == this.direction;
	}

	-- returns true if could enqueue, false if queue is full
	public method boolean can_enqueue(Packet p) {
		return (this.current_bit_length + p.bit_length() <= max_bit_capacity);
	}	

	public method boolean enqueue(Packet p) {
		boolean flag = false;
		if can_enqueue(p) {			
			this.buffer[this.tail] = p;
			this.tail += 1;
			if this.tail == this.max_packets_queued {
				this.tail = 0;
			} 
			this.packets_queued += 1;
			this.current_bit_length += p.bit_length();
			flag = true;			
		} 
		return flag;
	}	

	-- returns true if could dequeue, false if queue is empty
	public method boolean can_dequeue() {
		return (this.packets_queued > 0);
	}
	-- Must only be called after checking can_dequeue()
	public method Packet dequeue() {		
		Packet popped = this.buffer[this.head];
		this.head += 1;
		if this.head == this.max_packets_queued {
			this.head = 0;
		}
		this.packets_queued -= 1;
		this.current_bit_length -= popped.bit_length();
		return popped;		
	}	
	
	-- return pointer to head packet, for checking whether there's enough
	-- time to send the packet, for example.
	public method Packet head() {
		return this.buffer[this.head];
	}
end class
